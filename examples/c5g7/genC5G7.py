"""Generate the full C5G7 benchmark model."""
import gmsh

import mocmg
import mocmg.mesh
import mocmg.model

pi = 3.141592653589793

lc = 0.40
lcmin = 0.04
gen_model = False

# Geometry
# Module 1 - UO2-3.3 pin
# Module 2 - MOX-4.3 pin
# Module 3 - MOX-7.0 pin
# Module 4 - MOX-8.7 pin
# Module 5 - Fission Chamber pin
# Module 6 - Guide Tube pin
# Module 7 - Reflector pin

# lattice 1 2*17
#  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
#  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
#  1 1 1 1 1 6 1 1 6 1 1 6 1 1 1 1 1
#  1 1 1 6 1 1 1 1 1 1 1 1 1 6 1 1 1
#  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
#  1 1 6 1 1 6 1 1 6 1 1 6 1 1 6 1 1
#  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
#  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
#  1 1 6 1 1 6 1 1 5 1 1 6 1 1 6 1 1
#  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
#  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
#  1 1 6 1 1 6 1 1 6 1 1 6 1 1 6 1 1
#  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
#  1 1 1 6 1 1 1 1 1 1 1 1 1 6 1 1 1
#  1 1 1 1 1 6 1 1 6 1 1 6 1 1 1 1 1
#  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
#  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
# lattice 2 2*17
#  2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
#  2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2
#  2 3 3 3 3 6 3 3 6 3 3 6 3 3 3 3 2
#  2 3 3 6 3 4 4 4 4 4 4 4 3 6 3 3 2
#  2 3 3 3 4 4 4 4 4 4 4 4 4 3 3 3 2
#  2 3 6 4 4 6 4 4 6 4 4 6 4 4 6 3 2
#  2 3 3 4 4 4 4 4 4 4 4 4 4 4 3 3 2
#  2 3 3 4 4 4 4 4 4 4 4 4 4 4 3 3 2
#  2 3 6 4 4 6 4 4 5 4 4 6 4 4 6 3 2
#  2 3 3 4 4 4 4 4 4 4 4 4 4 4 3 3 2
#  2 3 3 4 4 4 4 4 4 4 4 4 4 4 3 3 2
#  2 3 6 4 4 6 4 4 6 4 4 6 4 4 6 3 2
#  2 3 3 3 4 4 4 4 4 4 4 4 4 3 3 3 2
#  2 3 3 6 3 4 4 4 4 4 4 4 3 6 3 3 2
#  2 3 3 3 3 6 3 3 6 3 3 6 3 3 3 3 2
#  2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2
#  2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
#
# lattice 3 2*17
#  7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
#  7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
#  7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
#  7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
#  7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
#  7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
#  7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
#  7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
#  7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
#  7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
#  7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
#  7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
#  7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
#  7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
#  7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
#  7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
#  7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7

# core 360
#   1 2 3
#   2 1 3
#   3 3 3

# Each pin cell has 1.26 cm pitch, 0.54 cm radius pins
# Label pinID like MPACT does
#        x 1   2   3   4   5
#      y ---------------------
#      1 | 11| 12| 13| 14| 15|
#        ---------------------
#      2 | 6 | 7 | 8 | 9 | 10|
#        ---------------------
#      3 | 1 | 2 | 3 | 4 | 5 |
#        *--------------------  * is where (0.0,0.0,0.0) is


def coord_2_id(x, y):
    """Give the pinID from the x,y coordinate."""
    return (34 - y) * 34 + x


gmsh.initialize()
mocmg.initialize()
if gen_model:  # noqa: C901
    radius = 0.54
    for j in range(34):
        for i in range(34):
            gmsh.model.occ.addDisk(
                1.26 / 2 + 1.26 * i, 1.26 / 2 + 1.26 * j + 21.42, 0, radius, radius
            )
    gmsh.model.occ.synchronize()

    # Assign materials using tags of entities, but determine tags from coordinates of pins
    # using the diagram above.
    # UO2 tags generated by setting all pins to UO2 and removing guide tube and fission chamber pins
    coords_uo2 = []
    for i in range(1, 18):
        for j in range(1, 18):
            coords_uo2.append((i, j))
    for i in range(18, 35):
        for j in range(18, 35):
            coords_uo2.append((i, j))
    tags_uo2 = [coord_2_id(*c) for c in coords_uo2]
    del coords_uo2
    # MOX-7.0 by removal of guide tube, fission chamber, 4.3, and 8.7
    coords_mox70 = []
    for i in range(1, 18):
        for j in range(18, 35):
            coords_mox70.append((i, j))
    for i in range(18, 35):
        for j in range(1, 18):
            coords_mox70.append((i, j))
    tags_mox70 = [coord_2_id(*c) for c in coords_mox70]
    del coords_mox70
    # Fission chamber
    coords_fc = [(9, 9), (26, 9), (26, 26), (9, 26)]
    tags_fc = [coord_2_id(*c) for c in coords_fc]
    del coords_fc
    # Guide Tube
    coords_gt = [
        (6, 3),
        (9, 3),
        (12, 3),
        (4, 4),
        (14, 4),
        (3, 6),
        (6, 6),
        (9, 6),
        (12, 6),
        (15, 6),
        (3, 9),
        (6, 9),
        (12, 9),
        (15, 9),
        (3, 12),
        (6, 12),
        (9, 12),
        (12, 12),
        (15, 12),
        (4, 14),
        (14, 14),
        (6, 15),
        (9, 15),
        (12, 15),
    ]
    coords_shift = coords_gt.copy()
    for c in coords_gt:
        coords_shift.append((c[0] + 17, c[1]))
        coords_shift.append((c[0], c[1] + 17))
        coords_shift.append((c[0] + 17, c[1] + 17))
    tags_gt = [coord_2_id(*c) for c in coords_shift]
    del coords_gt
    del coords_shift
    # MOX-4.3
    coords_mox43 = []
    for i in range(18, 35):
        coords_mox43.append((i, 1))
        coords_mox43.append((i, 17))
    for i in range(2, 17):
        coords_mox43.append((18, i))
        coords_mox43.append((34, i))
    coords_shift = coords_mox43.copy()
    for c in coords_mox43:
        coords_shift.append((c[0] - 17, c[1] + 17))
    tags_mox43 = [coord_2_id(*c) for c in coords_shift]
    del coords_mox43
    del coords_shift
    # MOX-8.7
    coords_mox87 = []
    for i in range(6, 13):
        coords_mox87.append((i, 21))
        coords_mox87.append((i, 31))
    for i in range(5, 14):
        coords_mox87.append((i, 22))
        coords_mox87.append((i, 30))
    exclude = [
        (6, 23),
        (9, 23),
        (12, 23),
        (6, 26),
        (9, 26),
        (12, 26),
        (6, 29),
        (9, 29),
        (12, 29),
    ]
    for i in range(4, 15):
        for j in range(23, 30):
            if not (i, j) in exclude:
                coords_mox87.append((i, j))
    coords_shift = coords_mox87.copy()
    for c in coords_mox87:
        coords_shift.append((c[0] + 17, c[1] - 17))
    tags_mox87 = [coord_2_id(*c) for c in coords_shift]
    del coords_mox87
    del coords_shift

    for t in tags_fc:
        if t in tags_uo2:
            tags_uo2.remove(t)
        elif t in tags_mox70:
            tags_mox70.remove(t)
    for t in tags_gt:
        if t in tags_uo2:
            tags_uo2.remove(t)
        elif t in tags_mox70:
            tags_mox70.remove(t)
    for t in tags_mox43:
        if t in tags_mox70:
            tags_mox70.remove(t)
    for t in tags_mox87:
        if t in tags_mox70:
            tags_mox70.remove(t)

    p = gmsh.model.addPhysicalGroup(2, tags_uo2)
    gmsh.model.setPhysicalName(2, p, "MATERIAL_UO2-3.3")
    p = gmsh.model.addPhysicalGroup(2, tags_mox70)
    gmsh.model.setPhysicalName(2, p, "MATERIAL_MOX-7.0")
    p = gmsh.model.addPhysicalGroup(2, tags_fc)
    gmsh.model.setPhysicalName(2, p, "MATERIAL_FISSION_CHAMBER")
    p = gmsh.model.addPhysicalGroup(2, tags_gt)
    gmsh.model.setPhysicalName(2, p, "MATERIAL_GUIDE_TUBE")
    p = gmsh.model.addPhysicalGroup(2, tags_mox43)
    gmsh.model.setPhysicalName(2, p, "MATERIAL_MOX-4.3")
    p = gmsh.model.addPhysicalGroup(2, tags_mox87)
    gmsh.model.setPhysicalName(2, p, "MATERIAL_MOX-8.7")
    mocmg.model.overlay_rectangular_grid(bb=[0, 0, 0, 64.26, 64.26, 0], nx=[3, 17], ny=[3, 17])
    gmsh.fltk.run()

    # Mesh
    gmsh.model.mesh.setSize(gmsh.model.getEntities(0), lc)
    gmsh.option.setNumber("Mesh.ElementOrder", 2)
    gmsh.option.setNumber("Mesh.HighOrderOptimize", 2)
    gmsh.model.mesh.generate(2)
    gmsh.fltk.run()

    gmsh.write("c5g7.inp")
mesh = mocmg.mesh.read_abaqus_file("c5g7.inp")
gridmesh = mocmg.mesh.make_gridmesh(mesh)
mocmg.mesh.write_xdmf_file("c5g7.xdmf", gridmesh)

gmsh.finalize()
